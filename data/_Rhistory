install.packages(c("BH", "boot", "class", "cluster", "codetools", "colorspace", "curl", "DBI", "digest", "evaluate", "foreign", "ggplot2", "git2r", "haven", "hms", "jsonlite", "knitr", "lattice", "lubridate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openssl", "packrat", "R6", "Rcpp", "reshape2", "rmarkdown", "scales", "shiny", "spatial", "stringi", "stringr", "survival", "tibble", "tidyr", "yaml"))
library("compiler", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("curl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
version
update
upgrade
R upgrade
upgrade(R)
install.packages("installr")
install.packages("installr")
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("compiler", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("Matrix", "mgcv", "nlme", "survival"))
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("https://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R")))
library(h2o)
localH2O = h2o.init(nthreads=-1)
# Finally, let's run a demo to see H2O at work.
demo(h2o.kmeans)
install.packages(c("boot", "cluster", "foreign", "h2o", "jsonlite", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "statmod", "survival"))
install.packages("ggplot2, googleVis")
install.packages("ggplot2, googleVis")
install.packages("ggplot2")
install.packages("ggplot2")
installed.packages()
install.packages("googleVis")
install.packages("plyr")
install.packages("data.table")
install.packages("MissForest")
install.packages("missForest")
install.packages("missMDA")
install.packages("Outliers")
install.packages("outliers")
install.packages("EVIR")
install.packages("evir")
install.packages("features")
install.packages("rrf")
install.packages("RRF")
install.packages("factoMineR")
install.packages("FactoMineR")
install.packages("CCP")
install.packages("LSMeans")
install.packages("lsmeans")
install.packages("comparison")
install.packages("RegTest")
install.packages("regtest")
install.packages("ACD")
install.packages("binomtools")
install.packages("binomTools")
install.packages("daim")
install.packages("Daim")
install.packages("clusteval")
install.packages("sigclust")
install.packages("proc")
install.packages("pROC")
install.packages("TimeROC")
install.packages("timeROC")
install.packages("car")
install.packages("randomforest")
install.packages("randomForest")
install.packages("RMiner")
install.packages("rminer")
install.packages("corelearn")
install.packages("CORElearn")
install.packages("Caret")
install.packages("caret")
install.packages("bigrf")
install.packages("bigRF")
install.packages("BigRF")
install.packages("CBA")
install.packages("cba")
install.packages("rankcluster")
install.packages("Rankcluster")
install.packages("forecast")
install.packages("ltsa")
install.packages("survival")
install.packages("basta")
install.packages("BaSTA")
install.packages("Rcpp")
install.packages("parallel")
install.packages("tm")
install.packages("twitteR")
install.packages("XML")
install.packages("jasonlite")
install.packages("jsonlite")
install.packages("bigrf")
install.packages("httr")
install.packages("sqldf")
install.packages("rodbc")
install.packages("RODBC")
install.packages("RMongo")
install.packages("shiny")
install.packages("RMarkdown")
install.packages("rmarkdown")
install.packages("swirl")
install.packages("reshape2")
install.packages("qcc")
install.packages("plyr")
install.packages("xkcd")
install.packages("magrittr")
install.packages("knitr")
install.packages("functional")
Slidify
install.packages("Slidify")
install.packages("slidify")
install.packages("Matrix")
install.packages("lapply")
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
install.packages("lubridate")
install.packages("gbm")
install.packages("stats")
install.packages("recharts")
install.packages("xts")
install.packages("zoo")
install.packages("quantmod")
install.packages("TTS")
install.packages("portfolio")
install.packages("lapply")
install.packages("iapply")
install.packages("*apply")
installed.packages()
sink('rpackages.txt')
installed.packages()
sink()
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
quit()
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
print(ip)
sink('rpacks.txt')
print(ip)
sink()
quit()
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("statmod","RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/rel-weierstrass/3/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
h20.end
h2o.accuracy()
h20.end
h2o.end
h2o.shutdown()
sem<-sd(x)/sqrt(length(x))
1 - pbinom(498001, 998000, .5)
pbinom(498001, 998000, .5)
install.packages("shinythemes")
devtools::install_github("rstudio/rstudioapi")
install.packages("devtools")
devtools::install_github("rstudio/rstudioapi")
$editor
rstudioapi::getThemeInfo()
install.packages("RFormatter")
install.packages("tiddyverse")
install.packages("rmarkdown")
install.packages("shiny")
install.packages("ggplot2")
install.packages(c("httpuv", "MASS", "shiny", "stringr", "survival"))
source('~/BioCountStat/rcodes/raw_plot.R')
source('~/BioCountStat/rcodes/raw_plot_gg.R')
source('~/BioCountStat/rcodes/pct_plot.R')
reprex:::reprex_addin()
tfruns::training_run("~/BioCountStat/rcodes/pct_plot.R")
View(tfruns::ls_runs())
View(tfruns::ls_runs())
source('~/BioCountStat/rcodes/raw_plot.R')
